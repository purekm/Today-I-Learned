Q16

요약:
데이터 레이크는 Amazon S3와 Amazon RDS (PostgreSQL) 기반
모든 데이터 소스를 포함한 시각화 및 보고 솔루션 필요
관리 팀은 전체 시각화에 대한 전체 액세스
나머지 사용자들은 제한된 액세스만 가능해야 함

B. Amazon QuickSight 에서 분석을 생성합니다. 모든 데이터 소스를 연결하고 새 데이터 
세트를 만듭니다. 대시보드를 게시하여 데이터를 시각화합니다. 적절한 사용자 및 그룹과 
대시보드를 공유합니다. 

QuickSight를 사용해서 데이터 시각화 제공하며, QuickSight는 사용자 및 그룹 기반 공유/제한 기능 제공
대시보드는 적절한 사용자와 및 그룹과 공유
QuickSight는 누구와도 공유되지 않으며, 소유자만 액세스 가능
그러나, 게시 한 후에는 QuickSight계정의 다른 사용자 or 그룹과 공유 가능

Q17
요약:
EC2 인스턴스에서 실행되는 애플리케이션이 Amazon S3 버킷에 접근해야 함
솔루션 설계자는 EC2 인스턴스가 S3에 액세스 가능한지 확인해야 함

A. S3 버킷에 대한 액세스 권한을 부여하는 IAM 역할을 생성합니다. 역할을 EC2 인스턴스에 연결합니다.
IAM Role + EC2 인스턴스 연결 = EC2가 S3에 안전하게 접근 가능
정책은 객체일 뿐, 권한을 줄 순 없음

Q18
요구사항 요약
사용자 웹 업로드 → S3 버킷에 저장
Lambda 함수로 자동 처리 및 압축
압축된 이미지를 다른 S3 버킷에 저장
내구성 있는 상태 비저장 구성 요소를 사용해야 함
자동 처리, 이벤트 기반, 서버리스 구조를 선호해야 함

A. SQS 대기열 + S3 업로드 트리거
SQS는 메시징 시스템으로, 상태 비저장 아키텍처에 적합
S3 이벤트를 SQS로 전송하면 Lambda가 안정적으로 후속 작업 수행 가능

B. Lambda 함수가 SQS 대기열을 호출 소스로 사용
Lambda는 메시지를 처리한 후 자동으로 삭제

Q19
문제 요약
3계층 웹 애플리케이션 (웹, 앱, DB)
웹 서버는 퍼블릭 서브넷, 나머지는 프라이빗 서브넷
검사 VPC에 타사 가상 방화벽 어플라이언스가 있음
모든 웹 트래픽이 웹 서버에 도달하기 전에 방화벽 통과/검사 필요
운영 오버헤드 최소화가 요구됨

핵심 키워드:
모든 수신 트래픽 → 어플라이언스(방화벽) → 웹 서버
운영 오버헤드 최소화 → 관리형 서비스, 자동 라우팅 우선

보기 분석
❌ A. Network Load Balancer (NLB) 사용
NLB는 패킷 수준에서 트래픽 분산하지만,
어플라이언스 통합과 관련된 라우팅 및 보안 처리를 직접 수행하지 않음
운영 오버헤드가 큼 (수동 구성 필요)

❌ B. Application Load Balancer (ALB) 사용
ALB는 L7(애플리케이션 계층) 로드 밸런서
ALB는 웹 요청을 라우팅하지만, 패킷 수준 트래픽 검사와는 무관
가상 방화벽(패킷 검사) 요구에는 적절하지 않음

❌ C. Transit Gateway 사용
Transit Gateway는 VPC 간 통신 허브이지만,
인터넷 수신 트래픽 필터링에 적합하지 않음
설정 복잡하고, 운영 오버헤드 높음

✅ D. Gateway Load Balancer (GWLB) + GWLB Endpoint 사용
"검사 VPC에 게이트웨이 로드 밸런서를 배포합니다. 엔드포인트를 통해 수신 패킷을 어플라이언스로 전달합니다."

GWLB는 타사 보안 어플라이언스(가상 방화벽 등)와 통합을 위해 만들어진 서비스로 사용하면 방화벽, 침입 탐지 및 방지 시스템, 심층 패킷 검사등 가능
수신 패킷을 자동으로 어플라이언스에 전달 후 다시 라우팅
운영 오버헤드 최소화, 관리형, 확장 가능
패킷 검사 요구사항 완벽하게 충족

Q20
요구사항 요약
프로덕션 데이터를 테스트 환경으로 복제해야 함
테스트 환경에서 데이터를 수정해도 원본에 영향 X
복제 작업은 최대한 빨라야 함
테스트 환경에서 일관되고 높은 I/O 성능 필요

핵심 개념 정리
Amazon EBS 스냅샷: EBS 볼륨의 시점 복사본. 다른 EBS 볼륨으로 복원 가능

빠른 스냅샷 복원 (Fast Snapshot Restore, FSR):
일반 스냅샷은 처음 복원 시 일부 블록이 지연될 수 있음 (lazy loading 방식)
FSR을 활성화하면 스냅샷에서 복원된 EBS 볼륨이 즉시 전체 성능을 발휘
빠른 복제 + 높은 IOPS 필요할 때 적합

보기별 분석
❌ A. 스냅샷 → 인스턴스 스토어에 복원
인스턴스 스토어는 일시적이고 휘발성 저장소
스냅샷은 EBS로 복원해야 함
성능보다 중요한 것은 데이터 안정성과 내구성인데 인스턴스 스토어는 적합하지 않음

❌ B. 다중 연결 + 프로덕션 볼륨 공유
EBS 다중 연결(Multi-Attach) 기능은 일부 io1/io2 볼륨에서만 가능
여러 인스턴스가 동일한 볼륨을 공유하지만,
테스트 환경에서 수정이 프로덕션에 영향을 줄 수 있음 → 요구사항 위반
게다가 "복제"가 아닌 "공유"에 가까움

❌ C. 스냅샷 → 볼륨 초기화 → 연결
일반적인 EBS 스냅샷 복원 방식
하지만 문제는 "복제 시간 최소화 + 높은 I/O 성능 보장"
일반 스냅샷 복원은 일부 I/O 지연 발생 (lazy loading)
요구사항 만족 부족

✅ D. EBS 빠른 스냅샷 복원(FSR) 활성화 후 복원
스냅샷을 만들고, FSR을 활성화하면:
즉시 전체 성능 발휘, 대량 데이터도 지연 없이 복제
복제된 볼륨은 테스트 환경에서 사용되므로 원본에 영향 없음
고성능 + 빠른 복제 → 요구사항 완벽히 충족

Q21
요구사항 요약
매일 단 하나의 제품 판매
하루 24시간 운영, 피크 시 수백만 건 요청, 밀리초 지연
운영 오버헤드 최소화 (즉, 서버 관리 최소화, 자동 확장 등)
고성능 처리

보기 분석
❌ A. Amazon S3 + CloudFront, S3에 주문 저장
정적 웹 호스팅에 적합 (정적 콘텐츠용)
주문 데이터를 S3에 저장하는 건 실시간 처리나 검색에 부적합
고성능 트랜잭션 처리 불가
DynamoDB, API Gateway, Lambda 없이 동적 처리 불가

❌ B. EC2 + Auto Scaling + RDS + ALB
전통적인 고가용성 구조지만,
EC2 + ALB + RDS 조합은 운영 오버헤드가 큼 (서버, 패치, 오토스케일 설정 등)
수백만 요청 처리 가능하나, 관리 측면에서 부담 큼
문제의 “운영 오버헤드 최소화” 조건에 맞지 않음

❌ C. Amazon EKS + RDS
Kubernetes 클러스터는 유연하고 확장성 뛰어남
그러나, EKS는 복잡한 운영, 설정, 유지관리 필요
클러스터 구성, 노드 풀 관리, 모니터링 등
운영 오버헤드가 매우 큼

✅ D. S3 + CloudFront + API Gateway + Lambda + DynamoDB
완전한 서버리스 아키텍처
정적 콘텐츠는 S3 + CloudFront로 초고속 제공
백엔드는 API Gateway + Lambda → 자동 확장, 서버 관리 없음
데이터 저장은 DynamoDB → 밀리초 단위 응답, 초당 수천 TPS 처리 가능
운영 오버헤드 거의 없음
트래픽이 폭주해도 Lambda와 DynamoDB는 자동 확장

정적이면 S3+CloudFront

Q22
요구사항 요약
Amazon S3 사용 (고정)
가용 영역 손실에 대한 복원력 필요 (즉, 다중 AZ 저장 필요)
일부 파일은 자주 액세스됨
다른 파일은 불규칙적으로 거의 액세스되지 않음
스토리지 비용 최소화가 목표

보기별 분석
❌ A. S3 Standard
높은 내구성(99.999999999%), 다중 AZ 복제
자주 접근되는 데이터에 적합
하지만 비용이 가장 비쌈
비정기적 접근 데이터를 위해 더 저렴한 옵션이 있음

✅ B. S3 Intelligent-Tiering (지능형 계층화)
자동으로 데이터 접근 패턴을 분석
자주 액세스되는 파일은 Standard 클래스로,
거의 접근되지 않는 파일은 IA (Infrequent Access) 또는 Archive 클래스로 이동
예측할 수 없는 접근 패턴에 최적
복원력 있음 (다중 AZ)
비용 최적화 자동 처리 → 운영 편의성 높음


❌ C. S3 Standard-IA
드물게 접근되는 데이터 전용
자주 접근되면 비용 비효율적
접근 패턴이 예측 불가능한 상황에선 부적절

❌ D. S3 One Zone-IA
비용은 저렴하지만, 단일 AZ에만 저장
문제 조건: "가용 영역 손실에 대한 복원력" → 조건 미충족

Q23
요구사항 요약
Amazon S3 Standard를 현재 사용 중
파일은 처음 1개월간 자주 접근됨
1개월 후에는 접근하지 않음
파일은 무기한 보관해야 함
가장 비용 효율적인 방식이 필요함

보기 분석
❌ A. S3 Intelligent-Tiering 사용
접근 패턴이 예측 가능한 상황에서는 비용이 오히려 비효율적
Intelligent-Tiering은 불규칙한 접근에 적합하고, 모니터링 비용도 발생함
이 문제에서는 1개월 후 접근 안함이 명확하므로 불필요한 비용

✅ B. S3 수명 주기 정책 → 1개월 후 S3 Glacier Deep Archive로 전환
Glacier Deep Archive는 장기 보관용 아카이브 스토리지
최저 비용 (최장 보관용), 무기한 저장에 적합
단점: 검색 속도 느림 (수 시간)
하지만 "접근하지 않음"이 명확하므로 문제 없음


❌ C. S3 수명 주기 정책 → S3 Standard-IA로 전환
IA는 가끔 접근되는 객체용, 검색 성능은 좋지만 Glacier보다 비쌈
1개월 이후 전혀 접근하지 않는 데이터에는 불필요하게 비쌈

❌ D. S3 수명 주기 정책 → S3 One Zone-IA로 전환
One Zone-IA는 더 저렴하지만 단일 가용 영역에만 저장
내구성 및 복원력 측면에서 리스크 있음
장기 백업에는 권장되지 않음

Q24
요구사항 요약
EC2 비용이 증가했고,
원치 않는 수직적 확장(더 비싼 인스턴스 유형 사용)이 있었음
최근 2개월 간의 비용 비교 및 인스턴스 유형별 분석이 필요
운영 오버헤드가 가장 적은 방법이어야 함

보기 분석
❌ A. AWS Budgets (예산)
AWS Budgets는 예산 초과 알림, 추적에는 유용하지만
비용 분석 및 시각화, 인스턴스 유형별 필터링은 제한적

✅ B. AWS Cost Explorer 사용
비용 분석 전용 도구, 운영 오버헤드 거의 없음
인스턴스 유형별 필터링, 서비스별 비교, 기간 설정 가능
지난 2개월, EC2 유형별 비용 그래프 쉽게 생성 가능
운영 오버헤드 최소 + 즉시 사용 가능 + 시각화 자동


❌ C. Billing and Cost Management 대시보드
이 대시보드는 총 비용 개요는 보이지만,
세부 분석(인스턴스 타입별, 태그별 등)은 부족

❌ D. Cost & Usage Report + QuickSight 시각화
가장 강력한 커스텀 분석이 가능하지만,
구성 복잡 (CUR 설정 → S3 → Athena or QuickSight 연결 → 시각화)
운영 오버헤드 가장 큼

Q25.
Lambda -> ApiGateway -> Aurora
확장성 및 할당량 증가를 시키려고 함

=> Lambda 2개 사용 + SQS로 병목현상 방지

Q26.
S3에 무단 구성 변경이 있는지 확인

=> AWS Config는 AWS 리소스 구성을 측정, 감사 및 평가할 수 있는 서비스
=> Config는 리소스 구성을 지속적으로 모니터링 및 기록하고, 원하는 구성을 기준으로 ㄱntjddmf wkehddmfh vudrkgkrp gowna

❌ B. AWS Trusted Advisor
Trusted Advisor는 비용 최적화, 보안, 내결함성 등에 대한 베스트 프랙티스 점검 도구입니다.
하지만 실시간 구성 변경 감지는 하지 않습니다.
예: S3 퍼블릭 접근 허용 여부를 정기적으로 진단하지만, 변경 발생 즉시 알리거나 추적하진 않음.

❌ C. Amazon Inspector
Amazon Inspector는 EC2, 컨테이너 등에 대한 취약점 스캐너입니다.
S3 구성 변경 여부와는 관련이 없습니다.

❌ D. S3 서버 액세스 로깅 + EventBridge
이 조합은 S3 객체 접근에 대한 로그(Event) 를 수집하고 대응하는 용도입니다.
예: 누가 어떤 객체를 읽었는가에 대한 로그는 가능하지만, 버킷 설정 변경(구성 변경) 은 추적하지 않습니다.
구성 변경을 추적하려면 CloudTrail이나 AWS Config를 써야 합니다.


Q27
핵심 키워드:
제품 관리자에게 CloudWatch 대시보드에 대한 접근 권한 제공
AWS 계정이 없음
최소 권한 원칙
즉, AWS 계정이 없는 사용자에게 CloudWatch 대시보드를 안전하게 보여주는 방법을 묻는 문제입니다.

🛠 보기 분석:
✅ A. CloudWatch 대시보드 공유 기능
AWS는 CloudWatch 대시보드를 외부 사용자와 공유하는 기능을 제공합니다.
이메일을 입력하면 공유 가능한 읽기 전용 링크가 생성되고, 해당 이메일 주소로 전송됩니다.
제품 관리자는 AWS 계정 없이도 이 링크를 통해 대시보드를 읽기 전용으로 볼 수 있습니다.

❌ B. IAM 사용자 생성 + CloudWatchReadOnlyAccess
이 방법은 AWS 계정이 필요하며, 로그인 자격 증명 공유는 보안상 좋지 않습니다.
최소 권한 원칙은 충족되지만, 문제 조건에 위배됩니다. ("제품 관리자에게 AWS 계정이 없습니다")

❌ C. IAM 사용자 생성 + ViewOnlyAccess
마찬가지로 AWS 계정이 없는 사용자에게 맞지 않음.
이 정책은 보안상 더 제한적이긴 하지만, 제품 관리자에게 AWS 콘솔 로그인 권한이 필요합니다.

❌ D. 배스천 서버 배포 + RDP 접속
매우 비효율적이며 보안 위험 높음.
단순한 읽기 전용 대시보드 접근에 인프라를 운영하고 RDP를 공유하는 방식은 전혀 권장되지 않습니다.
복잡하고 최소 권한 원칙을 위반함.

IAM 권한을 주려면 상대방이 AWS 계정이 있어야 함

Q28
문제 요약:
AWS Organizations 사용 중 (→ 중앙 관리형 계정 구조)
모든 계정에 대해 SSO 솔루션 필요
자체 관리형 Microsoft Active Directory(온프레미스 AD) 를 계속 사용하고자 함
사용자/그룹 관리는 온프레미스 AD에서 계속

단방향은 A는 B의 도메인에 Access가 되지만, B는 A의 도메인에 Access가 되지 않는 것
AWS Identitiy Center가 SSO의 후속 서비스인데, 양방향이 그냥 필요하다고 함
ec2, rds, fsx는 단방향도 가능하다

Q29
문제 요약:
VoIP 서비스 → 실시간 통신, UDP 프로토콜 사용
여러 리전에 배포됨
사용자를 지연 시간이 가장 짧은 리전으로 라우팅해야 함
**리전 간 장애 조치(Failover)**도 필요함

✅ A. NLB + Global Accelerator (정답)
NLB는 UDP 지원하며, Auto Scaling 그룹 대상도 연결 가능
Global Accelerator는 여러 리전의 NLB를 엔드포인트로 등록 가능
가장 가까운 리전으로 트래픽을 자동 라우팅 + 비정상 리전은 자동 장애 조치

❌ B. ALB + Global Accelerator
ALB는 UDP를 지원하지 않음 → VoIP에 부적합


❌ C. NLB + Route 53 지연 시간 레코드 + CloudFront
NLB는 UDP 지원 O
Route 53 지연 시간 라우팅도 가능 O
그러나 CloudFront는 TCP 기반 콘텐츠 배포 네트워크 → UDP 지원 안 됨
VoIP 트래픽에 적합하지 않음 ❌

❌ D. ALB + Route 53 가중치 레코드 + CloudFront
ALB는 UDP 미지원 ❌
가중치 기반은 지연 시간 기반 아님 → 목적 불일치
CloudFront 역시 UDP 미지원

Q30
Amazon RDS for MySQL (범용 인스턴스) 사용 중
매달 1회, 48시간 동안만 사용
리소스는 그대로 유지하면서 비용을 줄이고 싶음
즉, 평상시에는 DB가 필요 없음 → 정지하거나 없애고, 테스트 시에만 복구

✅ C. 스냅샷 → 인스턴스 종료 → 복원 시점에 다시 생성 (정답)
가장 비용 효율적인 방법
스냅샷 보관 비용만 청구 (GB당 매우 저렴) 압축하면 돈이 덜듬
DB 인스턴스는 삭제되므로 컴퓨팅 비용 없음
테스트 필요할 때 스냅샷에서 새 인스턴스를 기존 사양 그대로 복원 가능

❌ A. DB 인스턴스를 중지
RDS의 "정지 기능"은 최대 7일까지만 중지 가능
→ 그 이상 중지하면 인스턴스가 자동으로 다시 시작됨
따라서 한 달 이상 중지해야 하는 경우에는 적합하지 않음

❌ B. Auto Scaling 정책 사용
Amazon RDS는 EC2처럼 Auto Scaling 그룹을 지원하지 않음
오히려 Aurora에서는 일부 Auto Scaling 개념이 가능하나, 일반 RDS는 해당 없음

❌ D. 작은 인스턴스로 다운그레이드 후 다시 업그레이드
가능은 하지만 매번 수동 변경 필요 → 운영 부담
또한 다운그레이드/업그레이드 중에도 요금 발생
비용 절감 효과가 작고, 사양 변경에 따른 장애나 재시작 위험 존재

Q31
문제 요약:
EC2, RDS, Redshift 등 AWS 리소스에 태그가 모두 올바르게 지정되어야 함
관리의 노력은 최소화
즉, 자동화된 태그 검증 메커니즘이 필요

각 보기 분석:
✅ A. AWS Config 규칙 사용 (정답)
AWS Config는 AWS 리소스의 구성 상태를 추적하고, 규정 준수 여부를 자동 평가하는 서비스
**태그 관련 규칙(tag compliance)**을 설정하여,
지정한 태그 키들이 존재하지 않거나, 값이 누락된 리소스를 자동 탐지 가능
설정 후에는 지속적으로 자동 평가됨 → 운영 부담 최소화

❌ B. 비용 탐색기로 수동 감지 및 태깅
비용 탐색기(Cost Explorer)는 비용 시각화 도구로, 태그별 비용은 볼 수 있어도
누락된 태그를 자동 탐지하거나
수동 태그 지정 자동화는 안 됨

❌ C. EC2에서 코드 실행
자체 스크립트를 EC2에서 돌리면 비용과 관리 복잡성 증가
EC2 유지 관리 + 보안 + 실행 스케줄링 필요

❌ D. CloudWatch + Lambda로 API 호출 자동화
C보다는 낫지만 여전히 코드 작성 및 유지 필요
AWS Config의 내장 기능으로 쉽게 가능한 일에 굳이 Lambda?

Q32
문제 요약:
웹사이트 구성: HTML, CSS, 클라이언트 측 JavaScript, 이미지
즉, 정적 웹사이트입니다.
대상: 다른 팀이 접근할 수 있어야 함 (공개 접근)
요구사항: 비용 효율적인 호스팅

왜 S3가 가장 적합한가?
항목	이유
✅ 정적 콘텐츠 호스팅	HTML, CSS, JS, 이미지 전용이면 서버 사이드 로직 필요 없음
✅ 매우 저렴함	사용한 스토리지 용량 + 전송량 기준 과금 (트래픽이 없으면 비용도 거의 없음)
✅ 자동 확장	트래픽이 늘어나도 신경 쓸 필요 없음
✅ 유지관리 없음	서버 설치나 보안 패치 필요 없음
✅ S3 웹 호스팅 기능 제공	S3 정적 웹 호스팅 기능 내장 (index.html, error.html 지정 가능)

❌ 다른 선택지 분석:
A. Fargate에서 컨테이너 호스팅
서버리스 컨테이너이긴 하지만, 웹 서버 실행 필요 + 리소스 유지 비용 발생
정적 콘텐츠만 제공하는 데 오버킬
비용 ↑, 복잡도 ↑

C. EC2에 웹 서버 설치
EC2는 항상 실행되므로 비용 지속 발생
보안 패치, 인스턴스 유지보수 등 운영 부담 큼
정적 웹사이트에 불필요하게 무거운 인프라

D. Express.js + Lambda + ALB
서버리스 구조이긴 하지만 Express.js는 동적 서버 기반
정적 콘텐츠 호스팅엔 전혀 불필요한 아키텍처
비용도 더 높고, 오히려 느릴 수 있음

Q33
문제 요약:
고성능 온라인 마켓플레이스 → 수십만 사용자
수백만 건의 트랜잭션, 거의 실시간 처리 필요
여러 애플리케이션과 공유 가능해야 함
민감 정보 제거 후 저장 필요
지연 시간이 짧은 검색용 문서 DB에 저장

 보기 분석:
✅ C. Kinesis Data Streams + Lambda + DynamoDB → ✔️ 정답
실시간 스트리밍 처리 가능
Lambda 함수로 민감 정보 제거 → 사전 처리
정제된 데이터는 지연 시간 짧은 DynamoDB에 저장 가능
다른 시스템도 Kinesis 스트림에서 병렬로 소비 가능


❌ A. DynamoDB + Streams
DynamoDB는 쓰기 전 민감 정보 제거 같은 규칙 기능이 없음
즉, 데이터를 넣기 전에 Lambda나 애플리케이션이 정제해야 함
DynamoDB Streams는 유용하지만, 입력 전 처리 기능 없음

❌ B. Kinesis Firehose + Lambda + S3
Firehose는 대기 시간(latency)이 상대적으로 더 큼 → "거의 실시간" 요구에 미흡
Firehose는 데이터를 모아서 보내는 역할
**문서 DB (예: DynamoDB)**가 아니라 S3 위주 저장
실시간 검색이 어렵고 배치 중심 처리에 적합

❌ D. S3 파일 업로드 + Lambda + DynamoDB
일괄 처리(batch) 방식 → 실시간성 부족
거래 처리나 민감 정보 제거에 시간 지연 큼
실시간성과 확장성 요구에 미흡

Q34
보기 분석:
✅ B. Config → 구성 변경 추적, CloudTrail → API 호출 기록
정확히 역할 분담에 맞음

❌ A. CloudTrail로 구성 변경 추적 ❌
CloudTrail은 구성 변경 자체를 추적하지는 않음, 단지 API 호출 기록만 제공
구성 변경 추적은 AWS Config의 고유 기능

❌ C. CloudWatch로 API 호출 기록 ❌
CloudWatch는 API 호출을 직접적으로 기록하지 않음
CloudWatch는 지표나 로그를 수집하는 역할 (예: 로그 그룹, 알람)

❌ D. CloudWatch로 API 호출 기록, CloudTrail로 구성 변경 추적 ❌
둘 다 역할이 바뀜
CloudTrail은 구성 변경 추적 도구가 아니고
CloudWatch는 API 호출 기록 기능이 없음

Q35
문제 요약:
공개 웹 애플리케이션 → 인터넷에 노출됨
ELB 뒤의 EC2 인스턴스 구조
DNS는 타사 사용 중 → Route 53은 사용 안 함
요구사항: 대규모 DDoS 공격 탐지 및 보호

보기 분석:
✅ D. Shield Advanced + ELB 할당 → ✔️ 정답
ELB는 퍼블릭 웹 앱의 트래픽 진입점 → DDoS 방어 핵심 대상
Shield Advanced는:
대규모 L3/L4 DDoS 공격 대응
실시간 탐지 및 자동 완화
보안 전문가 지원 (DDoS Response Team, DRT)


❌ A. GuardDuty 활성화
GuardDuty는 내부 이상 징후 탐지 용도 (예: 비정상 API 호출, 포트 스캐닝 등)
DDoS 탐지 및 방어 전용 아님

❌ B. Amazon Inspector 활성화
EC2의 소프트웨어 취약점 분석 도구
네트워크 공격(DDoS 포함)과는 무관

❌ C. Shield + Route 53
문제 조건에서 DNS는 타사 사용 중 → Route 53 할당 불가
또한 Shield Standard는 기본 제공이라 별도 활성화 불필요
주요 보호 대상인 ELB가 빠짐 → 적절치 않음

Q36
 문제 요약:
두 AWS 리전에 각각 S3 버킷 존재
모든 데이터는 암호화되어야 함
암호화 및 복호화에 동일한 KMS 키 사용
데이터와 키는 각 리전에 저장되어야 함
운영 오버헤드는 최소화

✅ 핵심 요구사항 해석:
암호화 방식: SSE-KMS (서버 측 암호화 with KMS 키)
키 관리: 고객 관리형 키 (CMK) 사용
멀티 리전 키 공유 요구:
AWS KMS는 **“다중 리전 고객 관리형 키(Multi-Region CMK)”**를 지원
리전 간 복제 (CRR) 필요: S3 Replication
운영 오버헤드 최소화: 자동화된 기능 활용

🛠 보기 분석:
❌ A. SSE-S3 (Amazon S3 관리형 키) 사용
고객 관리형 키(CMK) 조건 불충족 ❌
키 공유 불가능, 키 관리 불가
요구 조건과 맞지 않음

✅ B. 다중 리전 KMS 키 + 클라이언트 측 암호화
키 관리 측면에서는 괜찮지만,
클라이언트 측 암호화는 개발자가 직접 암복호화 구현해야 함 → 운영 오버헤드 증가
문제에서 원하는 “최소한의 오버헤드”에 부적합 ❌

❌ C. SSE-S3 + 고객 관리형 KMS 키 없음
고객 관리형 키가 아님 → 조건 불충족 ❌
