malloc과 free함수{

동적할당 malloc 
void* malloc(size_t size) 
인자 값 size_t는 동적으로 할당할 메모리의 크기이다.
반환 값 성공시 할당한 메모리의 첫번째 주소 리턴, 실패시 NULL 리턴


malloc 함수를 사용하려면 malloc 함수가 포함되어 있는 
<stdlib.h>, <malloc.h> 헤더를 포함시켜야한다.

예제
int* arr
arr = (int*)malloc(sizeof(int)*4); size 4 동적할당
free(arr); 할당해제

size of는 자료형의 크기를 나타낸다.
arr은 int 4개를 동적할당한다는 뜻이다.

malloc 함수는 리턴값으로 void형 포인터를 리턴한다. 주의!!
위의 예제에서는 리턴된 void*를 int*로 캐스팅한 것이다.


메모리 해제 free
malloc함수를 사용한 뒤 꼭 메모리를 해제시켜줘야한다.
(해제 안해주면 메모리 누수 발생!!)
인자 값 ptr: 해제하고자 하는 메모리의 포인터
반환 값 없음
}

포인터변수 선언과 연산
포인터는 주소를 저장하는 변수이다.
포인터 변수가 주소를 저장하려면 변수의 주소를 알아야 하는데 변수 이름 앞에
&연산자를 붙이면 해당 변수의 시작 주소를 반환하고
참조하려면 *연산자를 사용한다.

포인터변수의 선언 및 사용
예제
int* p = NULL;
int i = 10;
p = &i;
printf("변수 i의 주소값 : %p \n",&i);
printf("포인터 p이 가리키는 값: %d \n",*p);

포인터 연산
포인터 또한 변수이므로 값을 더하거나 뺄 수 있다. 곱셈이나 나눗셈은 불가능!
포인터에 증가연산++를 적용하면 포인터 값이 자료형의 바이트 크기만큼 증가한다.