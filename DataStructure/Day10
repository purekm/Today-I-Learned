연결리스트 기반 Stack 구현 생략
Stack을 이용한 계산기 생략

배열 기반 큐의 특징
큐의 머리를 F, 큐의 꼬리를 R이라고 할때
enqueue를 하면 R이 다음칸을 가리키게되고 
새 데이터가 저장된다.
하지만 dequeue를 할때 일반적인 배열의 삭제 방법을
적용하면 삭제할때마다 1칸씩 이동하는 불편함이 있으므로 
F를 한칸씩 이동시킨다.
-> 배열의 끝에 도달하면 더 이상 오른쪽으로 갈 수 없는 상황 발생
-> 원형 큐로 단점 보완
이대로 원형 큐 구현시
큐를 완전히 채우고, 완전히 비웠을때 상황 둘 다 F가 R보다 한 칸 앞선 위치
-> F와 R의 위치만으로는 꽉 찬 경우와 텅 빈 경우 구분 불가
-> 꽉 차면 구분이 안되니 배열을 꽉 채우지 않는다.
배열의 길이가 N이면 데이터가 N-1개 채워졌을때 꽉찬 것으로 간주
-> 원형 큐 완성

연결리스트 기반 큐의 특징
스택의 push와 pop은 같은 위치에서 이루어지지만
큐의 enqueue와 dequeue는 다른 위치에서 이루어지는 점을 제외하고는 Stack과 유사

덱
double-ended queue로 앞과 뒤로 넣고 뺄 수 있는 자료구조
배열과 연결 리스트 기반으로 구현이 가능한데, 
꼬리 위치의 노드를 삭제할때 노드가 양뱡향으로 연결되어있으면 간단하므로
양방향 연결리스트를 사용하는게 가장 효율적이다.
