기존의 lecture 폴더에서 Threads and Concurrency에 대한 내용을 수정 및 추가했다.

멀티코어 프로그래밍 (Multicore Programming):
    멀티코어 또는 멀티프로세서 시스템에서 프로그래머에게 가해지는 압력과 도전 과제에는 작업을 분할하는 것, 작업의 균형을 맞추는 것, 데이터 분할, 데이터 종속성 관리, 테스트 및 디버깅이 포함됨.
    병렬 처리(Parallelism)는 시스템이 동시에 둘 이상의 작업을 수행할 수 있는 능력을 의미함.
    병행 처리(Concurrency)는 단일 프로세서 또는 코어에서 스케줄러가 병행성을 제공하여 여러 작업이 동시에 진행되는 것을 의미함.
    Amdahl's 법칙에 따라 코어를 추가했을 때 성능 향상이 직렬 컴포넌트에 의해 제한되는 부분을 설명함.
    병렬 처리의 유형
        데이터 병렬 처리(Data Parallelism): 동일한 데이터를 여러 코어에 분산시켜 각 코어가 동일한 작업을 수행함.
        작업 병렬 처리(Task Parallelism): 각 코어에 서로 다른 작업을 분배하여 병렬로 실행함.

스레드 모델 (Thread Models):
    사용자 스레드와 커널 스레드의 관계에 대한 설명이 추가됨.
    Many-to-One, One-to-One, Many-to-Many, Two-level 모델을 설명하며, 각 모델의 장단점과 구현 예시를 포함함.

암시적 스레딩 (Implicit Threading):
    암시적 스레딩의 개념과 그 장점에 대한 설명이 추가됨.
    스레드 수가 증가함에 따라 명시적 스레드 사용보다 암시적 스레드 사용이 인기를 끌고 있음.
    암시적 스레딩은 스레드 생성 및 관리를 컴파일러와 런타임 라이브러리가 담당함.
    Thread Pool: 미리 스레드를 생성해두고 필요할 때 할당하여 사용함.
        장점: 새로운 스레드를 생성하는 것보다 기존 스레드를 사용하는 것이 더 빠르며, 애플리케이션의 스레드 수를 풀의 크기로 제한할 수 있음.
    Fork-Join Parallelism: 여러 스레드를 생성(fork)하고, 작업이 완료되면 결합(join)하는 방식으로 병렬 처리를 수행함.

스레딩 이슈 (Threading Issues):
    시그널 처리 (Signal Handling): 멀티스레드 환경에서 시그널이 처리되는 방법에 대한 설명이 추가됨. 시그널을 특정 스레드에 전달하거나 모든 스레드에 전달하는 다양한 시나리오를 다룸.
    스레드 취소 (Thread Cancellation): 비동기 취소와 지연 취소의 개념을 설명하고, 각 방식의 장단점을 논의함.
    스레드 로컬 저장소 (Thread-Local Storage, TLS): 스레드가 고유한 데이터를 가질 수 있도록 허용하는 TLS의 개념과 활용 사례를 설명함.

리눅스 스레드 처리 (Linux Threads):
    리눅스에서 스레드를 "태스크(task)"로 다루는 방식에 대한 설명이 추가됨.
    clone() 시스템 호출을 통해 스레드가 생성되며, task_struct 구조체가 프로세스 데이터 구조를 가리키는 방식 등을 설명함.