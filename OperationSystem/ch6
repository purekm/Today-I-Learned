Synchronization Tools

프로세스는 동시에 실행 가능
busy waiting 상태 - 계속 CPU를 소모하는데 waiting중인 상태 
race condition - 경쟁 상태로 인해 원치않은 결과가 발생할 수 있기 때문에 상호 배타가 필수적 
critical section - 임계 구역으로, 공유 자원을 사용하는 구간을 나타냄

컴파일러는 비종속적인 두 명령어의 순서를 임의로 바꿀 수 있다.

Critical section 문제 해결책
1. 상호배제 
2. progress - 어떤 프로세스도 cs를 실행 중이지 않으면 , 대기중인 프로세스 중 하나는 선택되어야한다. 무기한 연기될 수 없음
3. bounded waiting - 한 프로세스가 cs에 들어가면 다른 프로세스가 cs에 들어가는 횟수는 제한되어야 한다.

OS는 커널이 선점 가능한지 여부에 따라 두가지 접근 방식을 취할 수 있다.
preemptive , Non preemptive로 나뉜다.

피터슨 solution

Synchronization Hardware
많은 시스템은 cs를 구현하기 위해 하드웨어 지원을 제공

단일 프로세서 - 인터럽트를 비활성화 가능

3가지 형태의 하드웨어 지원
1. 메모리 배리어
    strongly ordered - 프로세서의 메모리 수정이 즉시 다른 프로세서에게 보임
    weakly ordered - 메모리 수정이 다른 프로세서에게 즉시 보이지 않음


2. 하드웨어 명령어
3. atomic 변수


